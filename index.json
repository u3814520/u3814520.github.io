[{"categories":["心情札記"],"contents":"今天是你的生日，\n從我們認識，每一年我都有準備你的生日禮物，\n真的沒有一年，我有勇氣送出去，\n就算你從我眼前走過去，我都沒有勇氣靠近你\u0026hellip;\n不管現在你過什麼樣的生活，\n在我心裡，還是祝福著你健康與快樂。\n也許在你心裡，我從來都不是一回事，\n這麼多年來，始終想不通為什麼老天讓我們相識\u0026hellip;\n你永遠是我心中的秘密\u0026hellip;\nJe t’aime.\n","permalink":"https://u3814520.github.io/blog/hwaiwei_hbd/","tags":["心情札記"],"title":"送不出去的禮物"},{"categories":["轉職心路歷程"],"contents":"========================\ngithub直接下載也可以 ========================\n1.新增兩個檔案 檔名為docker-compose.yml version: \u0026#39;2.2\u0026#39; services: es01: image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1 restart: on-failure container_name: es01 environment: - node.name=es01 - cluster.name=es-docker-cluster - discovery.seed_hosts=es02 - cluster.initial_master_nodes=es01,es02 - bootstrap.memory_lock=true - \u0026#34;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026#34; ulimits: memlock: soft: -1 hard: -1 volumes: - data01:/usr/share/elasticsearch/data ports: - 9200:9200 networks: - elastic es02: image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1 container_name: es02 depends_on: - \u0026#34;es01\u0026#34; restart: on-failure environment: - node.name=es02 - cluster.name=es-docker-cluster - discovery.seed_hosts=es01 - cluster.initial_master_nodes=es01,es02 - bootstrap.memory_lock=true - \u0026#34;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026#34; ulimits: memlock: soft: -1 hard: -1 volumes: - data02:/usr/share/elasticsearch/data ports: - 9201:9200 networks: - elastic kibana: image: docker.elastic.co/kibana/kibana:7.14.1 container_name: kibana depends_on: - \u0026#34;es02\u0026#34; restart: on-failure volumes: - ./kibana.yml:/usr/share/kibana/config/kibana.yml networks: - elastic ports: - 5601:5601 volumes: data01: driver: local data02: driver: local networks: elastic: driver: bridge 檔名為kibana.yml server.name: kibana server.host: 0.0.0.0 elasticsearch.hosts: [\u0026#34;http://es01:9200\u0026#34;, \u0026#34;http://es02:9200\u0026#34;] monitoring.enabled: true 2.輸入指令: docker-compose up 等待架設~~~~\n3.錯誤解決: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]  先要切換到root；\n  然後可以執行以下命令，設置 vm.max_map_count ，但是重啟後又會恢復為預設值。\n sysctl -w vm.max_map_count=262144  持久性的做法是在 /etc/sysctl.conf 文件中修改 vm.max_map_count 參數\n echo \u0026#34;vm.max_map_count=262144\u0026#34; \u0026gt; /etc/sysctl.conf sysctl -p 3.開啟瀏覽器:  PS.如果剛開始會出現error\n 等它跑一下後， 瀏覽器網址輸入:\nhttp://\u0026lt;IP位址\u0026gt;:9200/\n或是\nhttp://localhost:9200/\n出現以下這個畫面就是Elasticsearch伺服器啟動了~\n瀏覽器網址再輸入:\nhttp://\u0026lt;IP位址\u0026gt;:5601/\n或是\nhttp://localhost:5601/\n就可以進入到Kibana圖形化介面囉~~\n","permalink":"https://u3814520.github.io/blog/elasticsearch/","tags":["轉職數據分析師"],"title":"用 Docker 架設 Elasticsearch + Kibana"},{"categories":["轉職心路歷程"],"contents":" 官方文件說明  ======\n第一次打包要做的事 註冊並登入PYPI帳號\n1.到Account settings裡，新增API tokens\n2.複製 tokens\n3.在%HOMEPATH%目錄下新增.pypirc檔，並貼入以下文字(username = token 不用改)\n[pypi] username = __token__ password = \u0026lt;貼上 API tokens\u0026gt; =======如非第一次打包上傳，以上可以跳過======= ==================================================\n1.所需安裝的套件(有兩個套件) pip install twine pip install wheel  備註:如果專案裡有資料夾，每個資料夾都要有__init__.py檔案，才會被打包進去\n 2.新增setup.py檔: #!/usr/bin/env python # -*- coding: utf-8 -*- # Note: To use the \u0026#39;upload\u0026#39; functionality of this file, you must: # $ pipenv install twine --dev import io import os import sys from shutil import rmtree from setuptools import find_packages, setup, Command # Package meta-data. NAME = \u0026#39;WebCrawleEslite\u0026#39; # PYPY上的名稱 DESCRIPTION = \u0026#39;bookstore WebCrawle Eslite\u0026#39; # 短說明 URL = \u0026#39;https://github.com/test/test\u0026#39; # 專案網址 EMAIL = \u0026#39;test@gmail.com\u0026#39; # 信箱 AUTHOR = \u0026#39;chiao ting\u0026#39; # 作者 REQUIRES_PYTHON = \u0026#39;\u0026gt;=3.6.0\u0026#39; # python 版本 VERSION = \u0026#39;0.1.0\u0026#39; # 版本(更新版本需改變) # What packages are required for this module to be executed? # 專案需要哪些套件 REQUIRED = [ \u0026#39;requests\u0026#39;, \u0026#39;pandas\u0026#39;, \u0026#39;fake_useragent\u0026#39;,\u0026#39;bs4\u0026#39;, ] # What packages are optional? EXTRAS = { # \u0026#39;fancy feature\u0026#39;: [\u0026#39;django\u0026#39;], } # The rest you shouldn\u0026#39;t have to touch too much :) # 以下不需調整 # ------------------------------------------------ # Except, perhaps the License and Trove Classifiers! # If you do change the License, remember to change the Trove Classifier for that! here = os.path.abspath(os.path.dirname(__file__)) # Import the README and use it as the long-description. # Note: this will only work if \u0026#39;README.md\u0026#39; is present in your MANIFEST.in file! try: with io.open(os.path.join(here, \u0026#39;README.md\u0026#39;), encoding=\u0026#39;utf-8\u0026#39;) as f: # 有需要長版說明可以寫在README.md long_description = \u0026#39;\\n\u0026#39; + f.read() except FileNotFoundError: long_description = DESCRIPTION # Load the package\u0026#39;s __version__.py module as a dictionary. about = {} if not VERSION: project_slug = NAME.lower().replace(\u0026#34;-\u0026#34;, \u0026#34;_\u0026#34;).replace(\u0026#34; \u0026#34;, \u0026#34;_\u0026#34;) with open(os.path.join(here, project_slug, \u0026#39;__version__.py\u0026#39;)) as f: exec(f.read(), about) else: about[\u0026#39;__version__\u0026#39;] = VERSION class UploadCommand(Command): \u0026#34;\u0026#34;\u0026#34;Support setup.py upload.\u0026#34;\u0026#34;\u0026#34; description = \u0026#39;Build and publish the package.\u0026#39; user_options = [] @staticmethod def status(s): \u0026#34;\u0026#34;\u0026#34;Prints things in bold.\u0026#34;\u0026#34;\u0026#34; print(\u0026#39;\\033[1m{0}\\033[0m\u0026#39;.format(s)) def initialize_options(self): pass def finalize_options(self): pass def run(self): try: self.status(\u0026#39;Removing previous builds…\u0026#39;) rmtree(os.path.join(here, \u0026#39;dist\u0026#39;)) except OSError: pass self.status(\u0026#39;Building Source and Wheel (universal) distribution…\u0026#39;) os.system(\u0026#39;{0}setup.py sdist bdist_wheel --universal\u0026#39;.format(sys.executable)) self.status(\u0026#39;Uploading the package to PyPI via Twine…\u0026#39;) os.system(\u0026#39;twine upload dist/*\u0026#39;) self.status(\u0026#39;Pushing git tags…\u0026#39;) os.system(\u0026#39;git tag v{0}\u0026#39;.format(about[\u0026#39;__version__\u0026#39;])) os.system(\u0026#39;git push --tags\u0026#39;) sys.exit() # Where the magic happens: setup( name=NAME, version=about[\u0026#39;__version__\u0026#39;], description=DESCRIPTION, long_description=long_description, long_description_content_type=\u0026#39;text/markdown\u0026#39;, author=AUTHOR, author_email=EMAIL, python_requires=REQUIRES_PYTHON, url=URL, packages=find_packages(exclude=[\u0026#34;tests\u0026#34;, \u0026#34;*.tests\u0026#34;, \u0026#34;*.tests.*\u0026#34;, \u0026#34;tests.*\u0026#34;]), # If your package is a single module, use this instead of \u0026#39;packages\u0026#39;: # py_modules=[\u0026#39;mypackage\u0026#39;], # entry_points={ # \u0026#39;console_scripts\u0026#39;: [\u0026#39;mycli=mymodule:cli\u0026#39;], # }, install_requires=REQUIRED, extras_require=EXTRAS, include_package_data=True, license=\u0026#39;MIT\u0026#39;, classifiers=[ # Trove classifiers # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers \u0026#39;License :: OSI Approved :: MIT License\u0026#39;, \u0026#39;Programming Language :: Python\u0026#39;, \u0026#39;Programming Language :: Python :: 3\u0026#39;, \u0026#39;Programming Language :: Python :: 3.6\u0026#39;, \u0026#39;Programming Language :: Python :: Implementation :: CPython\u0026#39;, \u0026#39;Programming Language :: Python :: Implementation :: PyPy\u0026#39; ], # $ setup.py publish support. cmdclass={ \u0026#39;upload\u0026#39;: UploadCommand, }, ) setup.py引用來源\n3.封裝:(有兩個指令須執行) python setup.py sdist  備註:執行出現 no module named \u0026lsquo;setuptools\u0026rsquo; 請執行ez_python.py\n python setup.py bdist_wheel 4.上傳到PYPI上 開啟CMD，到資料夾下輸入指令:\ntwine upload dist/* 完成後，複製View at:的網址\n就可以看到自己打包的專案了~\n*建立新的環境測試一下: pip install \u0026lt;自己打包的套件\u0026gt;\n就會發現py檔都在新建立的環境資料夾裡了\n=====打包前補充，不新增也不影響上傳打包=====\nLicense說明:\nhttps://choosealicense.com/\n  建立LICENSE.txt\n  複製許可證內容並在LICENSE.txt貼上\n  ","permalink":"https://u3814520.github.io/blog/pypi-packaging/","tags":["轉職數據分析師"],"title":"Python專案和套件打包-上傳PYPI"},{"categories":["轉職心路歷程"],"contents":"Python 資料分析＆機器學習入門_學習紀錄 在這自學的時代，\n最近剛學了Data Mining\n當然最近也才知道kaggle這個數據建模和數據分析競賽平臺，\n又搜尋到一個免費試看跟著影片做，從中學習的共享單車需求預測\n先貼kaggle競賽網址→ → → → Bike Sharing Demand ← ← ← ←\n除了使用Pandas與Numpy，還運用機器學習，\n這個教學實作範例是用隨機森林(RandomForestRegressor)，填補風速的空值\n最後輸出CSV檔，到kaggle繳交，有個分數(PS.我的第一個kaggle競賽成績)\n↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓\n請點單元16:免費試看-實作共享單車需求預測\ngithub-自我練習程式碼\n","permalink":"https://u3814520.github.io/blog/kagglebike/","tags":["轉職數據分析師"],"title":"kaggle-共享單車需求預測"},{"categories":["轉職心路歷程"],"contents":"進入滿滿程式碼的世界兩個月，\n最近又有一個小作品啦~~\n距離大學畢業後，再也沒有團隊合作做作業了，\n這是一個Azure的小作品\n  談談這個作品的故事吧~ 起初大家不知道要做什麼題目，\n在討論聊天的過程中，一位同學說了最近大樂透頭獎累積到27億，上課前去買了一張，\n這時另一位同學說:我們就來做大樂透對獎結合Azure圖像辨識，並在line bot呈現吧!!!\n架構(運用Azure課程中所教導的技術及知識):   Microsoft Azure - Computer vision影像辨識功能\n  Line Developer - 以Line Bot呈現至使用者服務端\n  Python - Flask - 作為服務後端，並以python語法串聯\n  Ngrok - 簡易可生成https服務\n  中間遇到的困難是:   圖像辨識有時會有小差錯，須調整影像色調測試。\n  圖像若拍攝稍有不清時，可能造成讀取辨識失敗。\n  Ngrok免費帳戶有流量限制，圖像不能傳送太快，否則會造成Error。\n  經過兩個禮拜時間，成品出來啦~~ 一點一點對程式碼的進步與了解，\n沒有基礎，每天除了吃飯、睡覺、洗澡，我都在程式碼世界裡了，\n儘管學習過程中，有些痛苦，就只要相信『沒有學不會的東西，只有不願意學的東西。』\nno pain no gain.期待未來更進步(在鼓勵自己XD)\n","permalink":"https://u3814520.github.io/blog/linebot/","tags":["轉職數據分析師"],"title":"line Bot 大樂透兌獎-Azure圖像辨識"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: 如果字串中有相同類型的括號，就判斷為true，沒有則判斷為false。\nGiven a string s containing just the characters ' ( \u0026lsquo;, ' ) \u0026lsquo;, ' { \u0026lsquo;, ' } \u0026lsquo;, ' [ ' and ' ] \u0026lsquo;, determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nExample 1:  Input: s = \u0026ldquo;( )\u0026rdquo;\nOutput: true\n Example 2:  Input: s = \u0026ldquo;( )[ ]{ }\u0026rdquo;\nOutput: true\n Example 3:  Input: s = \u0026ldquo;( ]\u0026rdquo;\nOutput: false\n Example 4:  Input: s = \u0026ldquo;( [ ) ]\u0026rdquo;\nOutput: false\n Example 5:  Input: s = \u0026ldquo;{ [ ] }\u0026rdquo;\nOutput: true\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def isValid(self, s): temp=[\u0026#39;temp\u0026#39;] tempdist={\u0026#39;)\u0026#39;:\u0026#39;(\u0026#39;,\u0026#39;}\u0026#39;:\u0026#39;{\u0026#39;,\u0026#39;]\u0026#39;:\u0026#39;[\u0026#39;} for i in s: if i in tempdist and tempdist[i]==temp[len(temp)-1]: temp.pop() else: temp.append(i) return len(temp) == 1 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/valid-parentheses/","tags":["LeetCode刷題筆記"],"title":"Valid Parentheses -Python解題"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: 在一系列字串中，找出相同的前綴字，如都沒有，則打印空字串。\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \u0026ldquo;\u0026rdquo;.\nExample 1:  Input: strs = [\u0026ldquo;flower\u0026rdquo;,\u0026ldquo;flow\u0026rdquo;,\u0026ldquo;flight\u0026rdquo;]\nOutput: \u0026ldquo;fl\u0026rdquo;\n Example 2:  Input: strs = [\u0026ldquo;dog\u0026rdquo;,\u0026ldquo;racecar\u0026rdquo;,\u0026ldquo;car\u0026rdquo;]\nOutput: \u0026quot;\u0026quot;\nExplanation: There is no common prefix among the input strings.\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def longestCommonPrefix(self, strs): for i in range(len(strs[0])): for s in strs[1:]: if i\u0026gt;=len(s) or s[i] != strs[0][i] : return strs[0][:i] if not strs: return \u0026#34;\u0026#34; return strs[0] 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/longest-common-prefix/","tags":["LeetCode刷題筆記"],"title":"Longest Common Prefix -Python解題"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: x為整數，如果x前後都是一的數字就為Ture，反之為False。\nGiven an integer x, return true if x is palindrome integer.\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.\nExample 1:  Input: x = 121\nOutput: true\n Example 2:  Input: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n Example 3:  Input: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n Example 4:  Input: x = -101\nOutput: false\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def isPalindrome(self, x): if x \u0026lt; 0: return False x = str(x) return x == x[::-1] 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/palindrome-number/","tags":["LeetCode刷題筆記"],"title":"Palindrome Number -Python解題"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: 羅馬字轉換阿拉伯數字。\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n   Symbol Value     I 1   V 5   X 10   L 50   C 100   D 500   M 1000    For example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.\nExample 1:  Input: s = \u0026ldquo;III\u0026rdquo;\nOutput: 3\n Example 2:  Input: s = \u0026ldquo;IV\u0026rdquo;\nOutput: 4\n Example 3:  Input: s = \u0026ldquo;IX\u0026rdquo;\nOutput: 9\n Example 4:  Input: s = \u0026ldquo;LVIII\u0026rdquo;\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n Example 5:  Input: s = \u0026ldquo;MCMXCIV\u0026rdquo;\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def romanToInt(self, s): result = 0; Rnum = {\u0026#39;I\u0026#39;:1,\u0026#39;V\u0026#39;:5,\u0026#39;X\u0026#39;:10,\u0026#39;L\u0026#39;:50,\u0026#39;C\u0026#39;:100,\u0026#39;D\u0026#39;:500,\u0026#39;M\u0026#39;:1000} for i in range(len(s)): if(Rnum[s[i]]): temp = Rnum[s[i]]; if(i != 0 and Rnum[s[i-1]] \u0026lt; Rnum[s[i]]): temp = temp - (Rnum[s[i-1]])*2; result = result + temp ; return result; 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/roman-to-integer/","tags":["LeetCode刷題筆記"],"title":"Roman to Integer -Python解題"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: 簡單來說呢!就是將數字位置反轉。\nGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\nConstraints:  -231 \u0026lt;= x \u0026lt;= 231 - 1\n Example 1:  Input: x = 123\nOutput: 321\n Example 2:  Input: x = -123\nOutput: -321\n Example 3:  Input: x = 120\nOutput: 21\n Example 4:  Input: x = 0\nOutput: 0\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def reverse(self, x): num=0 a=abs(x) while(a != 0): temp = a % 10 num =num * 10 + temp a=int(a/10) if x\u0026gt;0 and num \u0026lt;2147483647: return num elif x \u0026lt; 0 and num \u0026lt;= 2147483647: return -num else: return 0 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/reverse-integer/","tags":["LeetCode刷題筆記"],"title":"Reverse Integer -Python解題"},{"categories":["LeetCode刷題筆記"],"contents":"困難度:Easy\n題目: 找出兩個數字的索引相加會等於目標數字。\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\nExample 1:  Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9\nwe return [0, 1].\n Example 2:  Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n Example 3:  Input: nums = [3,3], target = 6\nOutput: [0,1]\n Python解題筆記 Inline code has back-ticks around it.\nclass Solution: def twoSum(self, nums, target): for i in range(0,len(nums)): for j in range(i+1,len(nums)): a = nums[i]+nums[j] if a == target: return [i,j] 題目原處-LeetCode\n","permalink":"https://u3814520.github.io/blog/two-sum/","tags":["LeetCode刷題筆記"],"title":"Two Sum -Python解題"},{"categories":["轉職心路歷程"],"contents":"我的第一支爬蟲程式『104人力銀行職缺爬蟲』\n沒有商科背景、沒有理工科背景，\n程式語言學了一個多月的時間，\n這算是我第一支完整的程式語言了吧~\n動機其實是爬蟲老師的作業啦!!\n寫了整整四天，終於完成啦!!\n真是感謝緯育TibaMe讓我能學習新的技能\n也感謝緯育TibaMe的python老師、爬蟲老師\nhttps://github.com/u3814520/work104\n","permalink":"https://u3814520.github.io/blog/104etl/","tags":["轉職數據分析師"],"title":"104人力銀行職缺爬蟲"},{"categories":["轉職心路歷程"],"contents":"求學過程都是跟設計、影視相關\n今年剛滿29歲，我做了決定，離職-轉職\n朝著數據分析師方向前進\n今年疫情嚴峻，這個決定是很大的決定，因為\n停止了收入，面對沒有收入的壓力，還有未來的不確定性\u0026hellip;\n考慮了很久，乾脆換個方向思考\n就趁疫情學習新技能吧!!!也許是一個新的寶藏!\nHello World.是學程式語言的第一句話\n感謝緯育TibaMe提供了我學習的環境\n7/7開課，至今已經一個多月了，\n起初天真的以為可以邊打工\n哈!但零基礎的我，學得好辛苦\u0026hellip;\n前兩個麗拜，學Python程式語言就感到挫折\n好幾個半夜都思考著:我做對選擇了嗎?\n不過學費有點貴，才剛開始，別輕言放棄!!\n既然當初都這麼有想法的決定轉職\n來吧!!拿出破釜沉舟的心~\n既然零基礎，就必須比別人更努力，更花時間讀書、學習\n半年的課程相信只是入門，陸陸續續買了很多書籍必須自修\n新人生解鎖的是:我既然辦了圖書館的借書證，第一次在圖書館借書。\n一個多月了，雖然有點困難，課程好滿，\n但開始覺得資訊產業蠻有趣的，\n相見恨晚啊!!!!怎麼大學沒選資工相關科系呢?!\n雖然我不知道半年後結果是什麼\u0026hellip;\n告訴自己:不論結果是什麼，全力以赴後，就順其自然。fighting!!\n","permalink":"https://u3814520.github.io/blog/data-analys/","tags":["轉職數據分析師"],"title":"Hello World.學習的第一句程式語言"},{"categories":["轉職心路歷程"],"contents":"先分享自己架網站的動機，\n其實一開始只是想找關於Github的教學，\n其中就搜尋到Github可以架設免費網站，\n就想起:曾經也想過架設一個自己的個人網站，選擇自己喜歡的樣式，分享自己的生活點滴，或是學習過程，\n不過很多都是要費用的，每年都需要付年費給主機商，了不起就是免費幾天試用而已，\n看到免費架站術這個關鍵字，就吸引我點進去了。\n重點重複一次：架設網頁是免費！免費！免費！ 這裡先說，以前我就有在hahow買過線上課程，品質和師資對問題回覆，以及評價都還不錯，\n看到免費架站術，教學影片價格又不貴，又可以終生使用，就買了啦~~\n而且古老師一一解釋、不怕聽不懂，\n做好的網站，只要願意分享網址，古老師還很用心的觀看，給予評價👍🏻👍🏻👍🏻超貼心的啦~~~\n所以我就寫一篇文章推薦一下啦~~~\n話就不多說了，就分享一下我在哪裡學習架設這個免費網站了吧~~~\n↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓\nGithub 免費架站術！輕鬆打造個人品牌\n#### 封面圖片來源\n","permalink":"https://u3814520.github.io/blog/personal-website/","tags":["轉職數據分析師"],"title":"[分享]Github免費架設個人網站"},{"categories":["打工仔生活"],"contents":"今年疫情嚴峻，部分工作停擺，但該繳的費用不會停擺╥﹏╥\n🛵於是我決定加入外送員，做個兼差。\n身為現代人，當然先上網搜尋一下加入哪家外送平台的外送員好呢?\n好像多數人覺得foodpanda比較好(外送員的部分)\n也是覺得foodpanda有送生鮮雜貨，不限用餐時間也有單(當時是這麼想的啦~)\n前後大概花了一個禮拜的時間順利拿到當任外送員資格，終於可以上線啦~~💪\n上線前，我大概想像了好多好多外送時會遇到的情況，\n比如被開發單、不小心打翻食物、遇到奧客等等\n沒想到實際上線後，我是多慮了，\n消費者都是善良的啦🤗 今天是第一次收到foodpanda的薪水，特別興奮!!!!😁😁😁😁\n就來分享我的薪水明細吧~~~\n對了!!foodpanda是半個月發一次薪水哦~~ ","permalink":"https://u3814520.github.io/blog/deliverymen/","tags":["沒有人不愛錢"],"title":"兼差外送，找生路XD"},{"categories":["旅遊日記"],"contents":"大學畢業後，進入職場當社畜之後，懷念起臺南的味道\n尤其是美食\n今年起了轉職的念頭，離職後，出發吧!來去臺南\n搭著高鐵，看著車向外的風景，綠油油的草地，在都市的緊張都瞬間釋放了~😄😄😄\n感謝臺南的朋友當我的導遊\n 首先 第一天 第一站\n 宏品虱目魚 地址:台南市新市區中山路191號\n聽朋友說這可是正港的臺南味呢!!!\n 第二站\n 來到了臺南又芒果盛產季節，當然是玉井啦~~\n不過剛吃飽先去教堂走走吧~~💐\n玉井白色教堂 地址:台南市玉井區層林1之7號\n門票:150元，可以抵消費\n 第三站\n 吃芒果冰啦~~\n玉井有間冰舖芒果冰 地址:台南市玉井區中正路154號\n 第四站\n [懷念美食] 大學時期吃過最喜歡吃的美食就是嫩骨飯\n大豆豆嫩骨飯🥰 地址:台南市南區大同路二段186巷5弄12號\n 第五站\n 吃完了晚餐，沒有手搖飲，怎麼可以!!!\n紅太陽 好啦!!回民宿睡覺啦~~~\n悅 Ya B\u0026amp;B 地址:台南市東區裕豐街222巷43弄1號\n裡面我看什麼都有提供了吧~~\n👍貼心小物太多了~~PS.還有面膜呢!!!\n 第二天 首先\n 早起的鳥兒有蟲吃，先吃早餐\n阿堂鹹粥 地址:台南市中西區西門路一段728號\n 第二站\n 飽芝林關東煮 結果買的不是關東煮\n哈哈哈!可惜了!!下次再去買~\n地址:台南市東區東安路116號\n 第三站\n 阿龍杏仁茶 [懷念美食] 大學時期喝過最喜歡喝的美食\n地址:台南市永康區小東路583號\n厲害的地方在於手工熬煮，不是杏仁粉喔!!!\n一喝就跟一杯20塊的杏仁茶不一樣啦!!!\n😍😍😍😍第一次喝就愛上😍😍😍😍\n 第三天\n 舊來發餅舖 地址:台南市北區自強街15號\n[超級必買] 黑糖香餅帶回台北是一定要的\n唐家泡菜館 這間我是第一次吃，好多人排隊喔!!\n地址:台南市東區裕農路18號\n還有好多菜單還沒吃到，明年希望再來囉~~~\n","permalink":"https://u3814520.github.io/blog/tainan0518/","tags":["愛吃不會胖-可以嗎"],"title":"臺南耍廢三天之旅"},{"categories":["單車挑戰"],"contents":"我是個上班族，假日又兼差的愛錢工作狂 (哈哈哈哈哈哈\n但人生有個小小夢想\n騎單車環島 平常也沒有特別運動，所以先從短距離開始\n士林騎腳踏車到淡水 感謝我朋友當我的導遊\n哈哈哈~我是小路癡~\n其實是懶，跟人家走，不用研究路線 🤣🤣🤣\n出發前，拍一張\n加油~加油~~📣📣📣📣\n中途休息XDDDDD\n經過一個多小時\u0026hellip;..\n抵達 淡水金色水岸徒步區 最後還是要推薦一下我的淡水美食菜單\n半坪屋手工糯米腸 老鼠肉.糯米腸都超級超級好吃XD\n","permalink":"https://u3814520.github.io/blog/tamsuibicycle/","tags":["單車挑戰"],"title":"士林騎腳踏車到淡水"},{"categories":["生日快樂"],"contents":"今年生日前，就想說趁自己還年輕的時候，\n送自己一份紀念青春的生日禮物🎁\u0026ndash;個人寫真\u0026ndash;\n⭐️透過網路看了很多間婚紗店網站、評價、很多照片，\n最終決定到 Only You Wedding 唯你婚紗攝影拍\n📸原本打算在生日當天拍攝，不料遇上颱風，只好改期，\n過了這麼久，到拍攝完成，照片出來啦~~~💕\n💖感謝接待我、跟我聯絡時間的門市接待\u0026ndash;之之\n💖感謝陪我挑禮服，給我建議的依靜、草莓、禮服秘書-淳淳\n💖感謝陪我到拍攝現場的陳妍榛\n💖感謝幫我拍攝、化妝、動作指導的造型師-Kiki、攝影師-愛莉、燈光師-胡椒\n超專業的XD\n以下就放幾張照片吧~~~ ","permalink":"https://u3814520.github.io/blog/art-photos/","tags":["生活儀式感"],"title":"個人藝術照"}]